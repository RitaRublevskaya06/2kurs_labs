USE UNIVER;

---- 1. Режим неявной транзакции
SET NOCOUNT ON;
DECLARE @flag CHAR = 'c';

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.NEW_AUDITORIUM') AND type IN (N'U'))
    DROP TABLE NEW_AUDITORIUM;

DECLARE @count INT;
SET IMPLICIT_TRANSACTIONS ON;

CREATE TABLE NEW_AUDITORIUM (
    AUDITORIUM_ID CHAR(10) PRIMARY KEY,
    CAPACITY INT CHECK (CAPACITY > 0)
);

INSERT INTO NEW_AUDITORIUM VALUES ('A1', 50), ('A2', 30);
SET @count = (SELECT COUNT(*) FROM NEW_AUDITORIUM);
PRINT 'Количество строк: ' + CAST(@count AS VARCHAR);

IF @flag = 'c'
    COMMIT;
ELSE
    ROLLBACK;

SET IMPLICIT_TRANSACTIONS OFF;

IF EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'dbo.NEW_AUDITORIUM') AND type IN (N'U'))
    PRINT 'Таблица NEW_AUDITORIUM существует';
ELSE
    PRINT 'Таблица NEW_AUDITORIUM не существует';

---- 2. Явная транзакция с обработкой ошибок
BEGIN TRY
    BEGIN TRANSACTION;
        UPDATE PROGRESS
        SET NOTE = 9
        WHERE IDSTUDENT = 1001 AND SUBJECT = 'OAP';
        
        DELETE FROM PROGRESS
        WHERE IDSTUDENT = 1001 AND SUBJECT = 'DB';
        
        COMMIT TRANSACTION;
        PRINT 'Транзакция успешно завершена.';
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION;
    PRINT 'Ошибка: ' + ERROR_MESSAGE();
END CATCH;


SELECT * FROM PROGRESS WHERE IDSTUDENT = 1001;

---- 3. Контрольные точки (SAVE TRANSACTION)
BEGIN TRANSACTION;
BEGIN TRY
    IF NOT EXISTS (SELECT 1 FROM FACULTY WHERE FACULTY = 'TEST')
    BEGIN
        INSERT INTO FACULTY (FACULTY, FACULTY_NAME) 
        VALUES ('TEST', 'Test Faculty');
    END
    ELSE
    BEGIN
        PRINT 'Факультет TEST уже существует';
    END

    SAVE TRANSACTION SavePoint1;

    IF NOT EXISTS (SELECT 1 FROM PULPIT WHERE PULPIT = 'TEST_P')
    BEGIN
        INSERT INTO PULPIT (PULPIT, PULPIT_NAME, FACULTY) 
        VALUES ('TEST_P', 'Test Pulpit', 'TEST');
    END
    ELSE
    BEGIN
        PRINT 'Кафедра TEST_P уже существует';
        ROLLBACK TRANSACTION SavePoint1;
    END

    COMMIT TRANSACTION;
    PRINT 'Транзакция успешно завершена';
END TRY
BEGIN CATCH
    ROLLBACK TRANSACTION;
    PRINT 'Ошибка: ' + ERROR_MESSAGE();
END CATCH;

---- 4. Проблемы параллельных транзакций
---- Сценарий A
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN TRANSACTION;
    SELECT * FROM PROGRESS WHERE IDSTUDENT = 1001;
COMMIT;


---- Сценарий B
BEGIN TRANSACTION;
    UPDATE PROGRESS SET NOTE = 8 WHERE IDSTUDENT = 1001;
ROLLBACK;



---- 5. Уровень изоляции READ COMMITTED
---- Сценарий A
SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN TRANSACTION;
    SELECT COUNT(*) FROM PROGRESS WHERE NOTE > 5;
COMMIT;


---- Сценарий B
BEGIN TRANSACTION;
    UPDATE PROGRESS SET NOTE = 7 WHERE NOTE = 5;
COMMIT;

---- 6. Уровень изоляции REPEATABLE READ
---- Сценарий A
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN TRANSACTION;
    SELECT * FROM PROGRESS WHERE IDSTUDENT = 1001;
COMMIT;

---- Сценарий B
BEGIN TRANSACTION;
    INSERT INTO PROGRESS VALUES ('DB', 1001, GETDATE(), 8);
COMMIT;

---- 7. Уровень изоляции SERIALIZABLE
---- Сценарий A
SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN TRANSACTION;
    DELETE FROM PROGRESS WHERE IDSTUDENT = 1001;
    INSERT INTO PROGRESS VALUES ('KG', 1001, GETDATE(), 9);
COMMIT;

---- Сценарий B
BEGIN TRANSACTION;
    DELETE FROM PROGRESS WHERE IDSTUDENT = 1001;
COMMIT;


---- 8. Вложенные транзакции
BEGIN TRANSACTION OuterTran;
    PRINT 'Уровень вложенности: ' + CAST(@@TRANCOUNT AS VARCHAR);
    
    BEGIN TRANSACTION InnerTran;
        PRINT 'Уровень вложенности: ' + CAST(@@TRANCOUNT AS VARCHAR);
        INSERT INTO FACULTY (FACULTY, FACULTY_NAME) VALUES ('TEMP', 'Temp Faculty');
        COMMIT TRANSACTION InnerTran;
    
    PRINT 'Уровень вложенности: ' + CAST(@@TRANCOUNT AS VARCHAR);
    
    IF @@TRANCOUNT > 0
        ROLLBACK TRANSACTION OuterTran;


