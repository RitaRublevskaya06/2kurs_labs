▎1. Что означает акроним INVEST?

Акроним INVEST обозначает набор критериев, которые помогают формулировать качественные пользовательские истории (User Stories) в Agile-разработке. Он включает в себя следующие элементы:

• I - Independent (Независимые): Истории должны быть независимыми друг от друга, чтобы их можно было реализовывать и тестировать по отдельности.

• N - Negotiable (Обсуждаемые): Истории не должны быть жесткими контрактами. Они должны быть гибкими и обсуждаемыми, чтобы команда могла адаптировать их в процессе работы.

• V - Valuable (Ценные): Каждая история должна представлять ценность для пользователя или бизнеса. Это помогает сосредоточиться на том, что действительно важно.

• E - Estimable (Оценочные): Команда должна иметь возможность оценить сложность и трудозатраты на реализацию истории. Если история слишком неясна, ее следует доработать.

• S - Small (Маленькие): Истории должны быть достаточно маленькими, чтобы их можно было завершить за один спринт. Это помогает избежать перегрузки команды и облегчает управление.

• T - Testable (Тестируемые): Каждая история должна иметь четкие критерии приемки, которые позволяют команде проверить, выполнены ли требования.

▎2. Для чего используется техника User Story Mapping?

User Story Mapping — это метод визуализации требований и функций продукта с помощью пользовательских историй. Он помогает командам:

• Понять контекст: Упорядочивая истории по этапам работы пользователя, команда может лучше понять, как различные функции связаны друг с другом.

• Определить приоритеты: Техника позволяет выделить наиболее важные истории и определить, какие из них следует реализовать в первую очередь.

• Улучшить коммуникацию: Визуализация помогает команде и заинтересованным сторонам лучше понять требования и ожидания.

• Планировать релизы: User Story Mapping позволяет разбить работу на более мелкие части и лучше спланировать итерации и релизы продукта.

▎3. Расскажите про методы приоритизации требований.

Существует несколько методов приоритизации требований, которые помогают командам определить, какие задачи следует выполнять в первую очередь:

• Метод MoSCoW: Разделяет требования на четыре категории:

  • Must have (Обязательно): Критически важные требования.

  • Should have (Следует иметь): Важные, но не критичные требования.

  • Could have (Может иметь): Желательные требования, которые могут быть добавлены при наличии времени.

  • Won't have (Не будет): Требования, которые не будут реализованы в текущем цикле.

• Метод Kano: Оценивает требования по двум осям: удовлетворенность пользователя и выполнение требований. Он помогает выявить базовые, производительные и привлекательные функции.

• Weighted Shortest Job First (WSJF): Используется в методологиях Agile и SAFe. Определяет приоритет на основе соотношения стоимости реализации к ожидаемой ценности. 

• Value vs. Effort Matrix: Помогает визуализировать требования по двум осям — ценности для бизнеса и усилиям для реализации. Это позволяет быстро определить "низко висящие фрукты" — высокоценные задачи с низкими затратами.

Эти методы помогают командам фокусироваться на наиболее важных задачах и эффективно управлять ресурсами.